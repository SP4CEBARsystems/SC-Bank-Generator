import { newCodeBlock, newContainer, newSVGImage } from "./dom_manipulator.js";
import ExtendedMath from "./extended_math.js";
import TypeValue from "./type_value.js";
import Word from "./word.js";

export default class MemoryBankGenerator {
    numberOfLocations;

    inputTypes;

    outputTypes;

    generatorCallback;

    /**
     * @type {string[][]}
     */
    generatedData = [];
    
    /**
     * 
     * @param {number} numberOfLocations 
     * @param {string[]} inputTypes
     * @param {(bankIndex:number[], bankPosition?:number) => number[]} generatorCallback 
     * @param {string[]} outputTypes
     */
    constructor(numberOfLocations = 1, inputTypes, generatorCallback, outputTypes) {
        this.numberOfLocations = numberOfLocations;
        this.inputTypes = inputTypes;
        this.outputTypes = outputTypes;
        this.generatorCallback = generatorCallback;
    }

    generate(){
        const bankArrayData = [];
        for (let bankPosition = 0; bankPosition < this.numberOfLocations; bankPosition++) {
            bankArrayData.push(this.generateOne(bankPosition));
        }
        this.generatedData = bankArrayData;
    }

    /**
     * 
     * @param {number} bankPosition 
     * @returns {string[]}
     */
    generateOne(bankPosition) {
        const bankData = ExtendedMath.sample(
            256, this.callbackHost, bankPosition, this.inputTypes, this.outputTypes, this.generatorCallback
        );
        const arrayLength = this.countMemoryBanksRequired(bankData);
        if (isNaN(arrayLength)) {
            const faultyIndex = bankData.findIndex((element) => isNaN(element));
            if (faultyIndex != -1) {
                console.error('invalid parameter(s) found, these are the values that your code produced:', bankData[faultyIndex], 'on index', faultyIndex, 'in', bankData);
            } else {
                console.error('invalid parameter(s) found, none of your values are NaN:', bankData);
            }
            return [];
        }
        const bankDataStrings = new Array(arrayLength).fill("");
        for (const bankValue of bankData) {
            for (const digitIndex in bankDataStrings) {
                bankDataStrings[digitIndex] += ExtendedMath.getHexDigit(bankValue, digitIndex);
            }
        }
        return bankDataStrings
    }

    /**
     * 
     * @param {number} bankIndex 
     * @param {number} bankPosition 
     * @param {string[]} inputTypes 
     * @param {string[]} outputTypes 
     * @param {(bankIndex:number[], bankPosition:number) => number[]} callback 
     * @returns {number}
     */
    callbackHost(bankIndex, bankPosition, inputTypes, outputTypes, callback){
        const inputSizes = inputTypes.map(TypeValue.sizeOf);
        const outputSizes = outputTypes.map(TypeValue.sizeOf);
        const parameters = ExtendedMath.wordSplit(bankIndex, inputSizes);
        TypeValue.arrayFromValues(inputTypes, parameters).forEach(element => element.outputValue()); 
        const output = callback(parameters, bankPosition);
        if (output.length != outputSizes.length) {
            console.error('outputSizes count mismatch, you have', output.length, 'outputs but you have defined', outputSizes.length, 'output lengths');
            return 0;
        }
        const encodedOutput = TypeValue.arrayFromValues(outputTypes, output).map(element => element.value);
        const out = ExtendedMath.combineOutput(encodedOutput.map((value, index) => new Word(outputSizes[index], value)));
        return out;
    }

    /**
     * 
     * @param {number[]} bankData 
     * @returns 
     */
    countMemoryBanksRequired(bankData) {
        const biggestValue = Math.max(...bankData);
        return Math.ceil(ExtendedMath.getBaseLog(16, biggestValue + 1));
    }

    /**
     * 
     * @returns {string[][]}
     */
    getFormattedData(){
        return this.generatedData
            .map(element => element
                .map(element => insertNewlines(element)));

        /**
         * generated by ChatGPT
         * @param {string} str 
         * @param {number} interval 
         * @returns 
         */
        function insertNewlines(str, interval = 16) {
            return str.replace(new RegExp(`(.{${interval}})(?=.)`, 'g'), '$1\n');
        }
    }

    write() {
        this.getFormattedData().forEach((elementY, indexY) => {
            if (elementY.length == 0) {
                newCodeBlock(`Bank ${indexY}, obsolete`, '');
            } else {
                elementY.forEach((element, index) => 
                    newCodeBlock(`Bank ${indexY}, digit ${index}:`, element)
                )
            }
        })
        this.generateCircuit();
    }

    getWidth(imageName){
        switch (imageName) {
            case 'bank_empty.jpg':
            case 'bank_wires.jpg':
            case 'bank_wires_crossing.jpg':
            case 'bank_digit.jpg':
            case 'bank_digit_single.jpg':
            case 'bank_selector_8-bit.jpg':
                return 212;
            default:
                return 127;
        }
    }

    /**
     * 
     * @returns 
     */
    generateCircuit(){
        /**
         * 
         * @param {*} element 
         * @param {*} currentX 
         * @param {*} digitYOffset 
         * @param {*} height 
         * @param {*} parent 
         * @param {*} svgWidth 
         * @param {*} svgHeight 
         * @returns 
         */
        const drawCircuitCell = (element, currentX, digitYOffset, height, parent, svgWidth) => {
            const width = this.getWidth(element);
            newSVGImage(currentX, digitYOffset, width, height, element, parent);
            currentX += width;
            svgWidth += width;
            return [currentX, svgWidth];
        }
        const parent = /** @type {SVGElement} */ document.getElementById('reference-circuit');
        if (parent === null) return;
        const sum = (accumulator, value) => accumulator + value;
        const totalInputSize = this.inputTypes.map(TypeValue.sizeOf).reduce(sum);
        const inputWireCount = Math.ceil(totalInputSize / 4);
        const outputWireCount = Math.ceil(this.outputTypes.map(TypeValue.sizeOf).reduce(sum) / 4);
        let process;
        if (inputWireCount <= 0) {
            process = [];
        } else if (inputWireCount <= 1) {
            process = ['bank_digit_single.jpg'];
        } else if (inputWireCount <= 2) {
            process = ['bank_digit.jpg'];
        } else if (inputWireCount <= 3) {
            process = ['bank_digit.jpg', 'bank_selector_4-bit.jpg'];
        } else {
            const amountOfSelectors = Math.ceil((inputWireCount - 2) / 2);
            process = ['bank_digit.jpg', ...Array(amountOfSelectors).fill('bank_selector_8-bit.jpg')];
        }
        let svgWidth = 0;
        let svgHeight = 0;
        const SingleBankInputSize = 8;
        const inputLayerCount = 2 ** (totalInputSize - SingleBankInputSize);
        for (let location = 0; location < this.numberOfLocations; location++) {
            for (let input = 0; input < inputLayerCount; input++) {
                for (let digit = 0; digit < outputWireCount; digit++) {
                    const height = 127;
                    const digitYOffset = ((location * inputLayerCount + input) * outputWireCount + digit) * height;
                    let currentX = 0;
                    let svgRowWidth = 0;
                    process.forEach((element, index) => {
                        [currentX, svgRowWidth] = drawCircuitCell(element, currentX, digitYOffset, height, parent, svgRowWidth);
                    });
                    let hasConnected = false;
                    for (let digitOut = 0; digitOut < outputWireCount; digitOut++) {
                        const isConnecting = digit === digitOut;
                        if (isConnecting) hasConnected = true;
                        const element = isConnecting ? 'output_collector.jpg' : !hasConnected ? 'output_crossing.jpg' : 'output_vertical.jpg';
                        [currentX, svgRowWidth] = drawCircuitCell(element, currentX, digitYOffset, height, parent, svgRowWidth);
                    }
                    svgWidth = Math.max(svgWidth, svgRowWidth);
                    svgHeight += height;
                    console.log(`add height: ${height} to ${svgHeight}`);
                }
            }
        }
        parent.setAttribute("width", `${svgWidth}px`);
        parent.setAttribute("height", `${svgHeight}px`);
        // parent.setHeight(5000);
        console.log(`total banks ${this.numberOfLocations * inputLayerCount * outputWireCount} = count (${this.numberOfLocations}) * input requirement (${inputLayerCount}) * digits (${outputWireCount})`);
    }

    getStats() {
        return '';
        // `${this.numberOfLocations} * ${inputLayerCount} * ${outputWireCount}`
    }
}
