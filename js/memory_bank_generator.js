import { newCodeBlock, newContainer, newSVGImage } from "./dom_manipulator.js";
import ExtendedMath from "./extended_math.js";
import Word from "./word.js";

export default class MemoryBankGenerator {
    numberOfLocations;

    inputSizes;

    outputSizes;

    generatorCallback;

    /**
     * @type {string[][]}
     */
    generatedData = [];
    
    /**
     * 
     * @param {number} numberOfLocations 
     * @param {number[]} inputSizes
     * @param {(bankIndex:number[], bankPosition?:number) => number[]} generatorCallback 
     * @param {number[]} outputSizes
     */
    constructor(numberOfLocations = 1, inputSizes, generatorCallback, outputSizes) {
        this.numberOfLocations = numberOfLocations;
        this.inputSizes = inputSizes;
        this.outputSizes = outputSizes;
        this.generatorCallback = generatorCallback;
    }

    generate(){
        const bankArrayData = [];
        for (let bankPosition = 0; bankPosition < this.numberOfLocations; bankPosition++) {
            bankArrayData.push(this.generateOne(bankPosition));
        }
        this.generatedData = bankArrayData;
    }

    /**
     * 
     * @param {number} bankPosition 
     * @returns {string[]}
     */
    generateOne(bankPosition) {
        const bankData = ExtendedMath.sample(
            256, this.callbackHost, bankPosition, this.inputSizes, this.outputSizes, this.generatorCallback
        );
        const arrayLength = this.countMemoryBanksRequired(bankData);
        if (isNaN(arrayLength)) {
            const faultyIndex = bankData.findIndex((element) => isNaN(element));
            if (faultyIndex != -1) {
                console.error('invalid parameter(s) found, these are the values that your code produced:', bankData[faultyIndex], 'on index', faultyIndex, 'in', bankData);
            } else {
                console.error('invalid parameter(s) found, none of your values are NaN:', bankData);
            }
            return [];
        }
        const bankDataStrings = new Array(arrayLength).fill("");
        for (const bankValue of bankData) {
            for (const digitIndex in bankDataStrings) {
                bankDataStrings[digitIndex] += ExtendedMath.getHexDigit(bankValue, digitIndex);
            }
        }
        return bankDataStrings
    }

    /**
     * 
     * @param {number} bankIndex 
     * @param {number} bankPosition 
     * @param {number[]} inputSizes 
     * @param {(bankIndex:number[], bankPosition:number) => number[]} callback 
     * @returns 
     */
    callbackHost(bankIndex, bankPosition, inputSizes, outputSizes, callback){
        const parameters = ExtendedMath.wordSplit(bankIndex, inputSizes);
        const output = callback(parameters, bankPosition);
        if (output.length != outputSizes.length) {
            console.error('output count mismatch, you have', output.length, 'outputs but you have defined', outputSizes.length, 'output lengths');
            return 0;
        }
        const out = ExtendedMath.combineOutput(output.map((value, index) => new Word(outputSizes[index], value)));
        return out;
    }

    /**
     * 
     * @param {number[]} bankData 
     * @returns 
     */
    countMemoryBanksRequired(bankData) {
        const biggestValue = Math.max(...bankData);
        return Math.ceil(ExtendedMath.getBaseLog(16, biggestValue + 1));
    }

    /**
     * 
     * @returns {string[][]}
     */
    getFormattedData(){
        return this.generatedData
            .map(element => element
                .map(element => insertNewlines(element)));

        /**
         * generated by ChatGPT
         * @param {string} str 
         * @param {number} interval 
         * @returns 
         */
        function insertNewlines(str, interval = 16) {
            return str.replace(new RegExp(`(.{${interval}})(?=.)`, 'g'), '$1\n');
        }
    }

    write() {
        this.getFormattedData().forEach((elementY, indexY) => {
            if (elementY.length == 0) {
                newCodeBlock(`Bank ${indexY}, obsolete`, '');
            } else {
                elementY.forEach((element, index) => 
                    newCodeBlock(`Bank ${indexY}, digit ${index}:`, element)
                )
            }
        })
        this.generateCircuit();
    }

    getWidth(imageName){
        switch (imageName) {
            case 'bank_empty.jpg':
            case 'bank_wires.jpg':
            case 'bank_wires_crossing.jpg':
            case 'bank_digit.jpg':
            case 'bank_selector_8-bit.jpg':
                return 212;
            default:
                return 127;
        }
    }

    generateCircuit(){
        const parent = document.getElementById('reference-circuit');
        if (parent === null) return;
        const sum = (accumulator, value) => accumulator + value;
        const inputWireCount = Math.ceil(this.inputSizes.reduce(sum) / 4);
        const outputWireCount = Math.ceil(this.outputSizes.reduce(sum) / 4);
        let process;
        if (inputWireCount <= 0) {
            process = [];
        } else if (inputWireCount <= 2) {
            process = ['bank_digit.jpg'];
        } else if (inputWireCount <= 3) {
            process = ['bank_digit.jpg', 'bank_selector_4-bit.jpg'];
        } else {
            const amountOfSelectors = Math.ceil((inputWireCount - 2) / 2);
            process = ['bank_digit.jpg', ...Array(amountOfSelectors).fill('bank_selector_8-bit.jpg')];
        }
        for (let location = 0; location < this.numberOfLocations; location++) {
            for (let digit = 0; digit < outputWireCount; digit++) {
                const height = 127;
                const digitYOffset = (location * outputWireCount + digit) * height;
                let currentX = 0;
                process.forEach((element, index) => {
                    const width = this.getWidth(element);
                    newSVGImage(currentX, digitYOffset, width, height, element, parent);
                    currentX += width;
                });
            }
        }
    }
}
