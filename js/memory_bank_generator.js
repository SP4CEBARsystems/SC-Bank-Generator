import ExtendedMath from "./extended_math.js";
import Word from "./word.js";

export default class MemoryBankGenerator {
    numberOfLocations;

    inputSizes;

    generatorCallback;

    /**
     * @type {string[][]}
     */
    generatedData = [];
    
    /**
     * 
     * @param {number} numberOfLocations 
     * @param {number[]} inputSizes
     * @param {(bankIndex:number[], bankPosition?:number) => Word[]} generatorCallback 
     */
    constructor(numberOfLocations = 1, inputSizes, generatorCallback) {
        this.numberOfLocations = numberOfLocations;
        this.inputSizes = inputSizes;
        this.generatorCallback = generatorCallback;
    }

    generate(){
        const bankArrayData = [];
        for (let bankPosition = 0; bankPosition < this.numberOfLocations; bankPosition++) {
            bankArrayData.push(this.generateOne(bankPosition));
        }
        this.generatedData = bankArrayData;
    }

    /**
     * 
     * @param {number} bankPosition 
     * @returns {string[]}
     */
    generateOne(bankPosition) {
        const bankData = ExtendedMath.sample(256, this.callbackHost, bankPosition, this.inputSizes, this.generatorCallback);
        const arrayLength = this.countMemoryBanksRequired(bankData);
        if (isNaN(arrayLength)) {
            const faultyIndex = bankData.findIndex((element) => isNaN(element));
            if (faultyIndex != -1) {
                console.error('invalid parameter(s) found, these are the values that your code produced:', bankData[faultyIndex], 'on index', faultyIndex, 'in', bankData);
            } else {
                console.error('invalid parameter(s) found, none of your values are NaN:', bankData);
            }
            return [];
        }
        const bankDataStrings = new Array(arrayLength).fill("");
        for (const bankValue of bankData) {
            for (const digitIndex in bankDataStrings) {
                bankDataStrings[digitIndex] += ExtendedMath.getHexDigit(bankValue, digitIndex);
            }
        }
        return bankDataStrings
    }

    /**
     * 
     * @param {number} bankIndex 
     * @param {number} bankPosition 
     * @param {number[]} inputSizes 
     * @param {(bankIndex:number[], bankPosition:number) => Word[]} callback 
     * @returns 
     */
    callbackHost(bankIndex, bankPosition, inputSizes, callback){
        const parameters = ExtendedMath.wordSplit(bankIndex, inputSizes);
        const output = callback(parameters, bankPosition);
        const out = ExtendedMath.combineOutput(output);
        return out;
    }

    /**
     * 
     * @param {number[]} bankData 
     * @returns 
     */
    countMemoryBanksRequired(bankData) {
        const biggestValue = Math.max(...bankData);
        return Math.ceil(ExtendedMath.getBaseLog(16, biggestValue + 1));
    }

    /**
     * 
     * @returns {string[][]}
     */
    getFormattedData(){
        return this.generatedData
            .map(element => element
                .map(element => insertNewlines(element)));

        /**
         * generated by ChatGPT
         * @param {string} str 
         * @param {number} interval 
         * @returns 
         */
        function insertNewlines(str, interval = 16) {
            return str.replace(new RegExp(`(.{${interval}})`, 'g'), '$1\n');//
        }
    }

    /**
     * 
     * @param {HTMLParagraphElement} element 
     */
    write(element) {
        element.innerHTML = this.getFormattedData()
            .reduce((previousY, elementY, indexY) => {
                if (elementY.length == 0) {
                    return previousY.concat(`<br>Bank ${indexY}, obsolete<br>`);
                } else {
                    return previousY.concat(elementY
                        .reduce((previous, element, index) => 
                            previous.concat(`<br>Bank ${indexY}, digit ${index}:<br>`, element.replace(/\n/g, '<br>'))
                            ,''
                        )
                    )
                }
            },'')
        
    }
}
