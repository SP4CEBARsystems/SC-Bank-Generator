import CodePreset from "./CodePreset.js";
import standardCode from "./StandardCode.js";

/**
 * @type {CodePreset[]}
 */
export const codePresets = [
    new CodePreset(
        standardCode.addition,
        'Addition',
        '',
        'ROM',
        ['4', '4'],
        ['5'],
    ),
    new CodePreset(
        standardCode.manualSubtraction,
        'Manual Subtraction',
        '',
        'ROM',
        ['4', '4'],
        ['4', '1'],
    ),
    new CodePreset(
        standardCode.subtraction,
        'Subtraction',
        '',
        'ROM',
        ['4', '4'],
        ['INT_5'],
    ),
    new CodePreset(
        standardCode.hexToDec,
        '8-bit Hexadecimal To 3-digit Decimal',
        '',
        'ROM',
        ['8'],
        ['4', '4', '4'],
    ),
    new CodePreset(
        standardCode.decToHex,
        '3-digit Decimal Input To 8-bit Hexadecimal',
        '',
        'ROM',
        ['4', '4', '4'],
        ['8'],
    ),
    new CodePreset(
        standardCode.typeConverter,
        "Sign-magnitude Integer To Two's Complement Integer",
        '',
        'ROM',
        ['SM_INT_8'],
        ['INT_8'],
    ),
    new CodePreset(
        standardCode.typeConverter,
        "Two's Complement Integer To Sign-magnitude Integer",
        '',
        'ROM',
        ['INT_8'],
        ['SM_INT_8'],
    ),
    new CodePreset(
        standardCode.bitMaskAndShift,
        '4-bit Mask',
        '',
        'ROM',
        ['4'],
        ['8'],
        [0, 0, 0b1111],
    ),
    new CodePreset(
        standardCode.bitMaskAndShift,
        '4-bit Mask And Shift Left 1',
        '',
        'ROM',
        ['4'],
        ['8'],
        [1, 0, 0b1111],
    ),
    new CodePreset(
        standardCode.bitMaskAndShift,
        '4-bit Mask And Shift Right 1',
        '',
        'ROM',
        ['4'],
        ['8'],
        [4, 1, 0b1111],
    ),
    new CodePreset(
        standardCode.incrementCounterFsm,
        '8-bit Increment-only Counter FSM',
        'that resets on the maximum value (aka "FF", "1111 1111"). Trigger the memory bank clock inputs to increment. Send the maximum signal (aka "F", "1.5v", "1111") to both input wires to reset it.',
        'FSM',
        ['8'],
        ['8'],
    ),
    new CodePreset(
        standardCode.counterFsm,
        '4-bit Counter FSM With Overflow',
        'Inputs: keep, reset, increment, decrement',
        'FSM',
        ['4, 1, 1'],
        ['4'],
        [0, 15, 1],
    ),
    new CodePreset(
        standardCode.counterFsm,
        '4-bit Counter FSM Without Overflow',
        'Inputs: keep, reset, increment, decrement',
        'FSM',
        ['4, 1, 1'],
        ['4'],
        [0, 15, 0],
    ),
    new CodePreset(
        standardCode.counterFsm,
        '6-bit Counter FSM With Overflow',
        'Inputs: keep, reset, increment, decrement',
        'FSM',
        ['6, 1, 1'],
        ['6'],
        [0, 63, 1],
    ),
    new CodePreset(
        standardCode.counterFsm,
        '6-bit Counter FSM Without Overflow',
        'Inputs: keep, reset, increment, decrement',
        'FSM',
        ['6, 1, 1'],
        ['6'],
        [0, 63, 0],
    ),
    new CodePreset(
        standardCode.bouncyCounterFsm,
        '6-bit Bouncy Counter FSM',
        '',
        'FSM',
        ['6', '1', '1'],
        ['6', '1'],
    ),
    new CodePreset(
        standardCode.cpuFsm,
        '2-bit CPU FSM',
        'with instructions: halt, load, subtract, branch if not zero, and a program to decrement until zero is reached. Given the small instruction set (2-bit gives only four different instructions) you should adjust it per program. Inspired by The Little Man Computer (Online Demo)',
        'FSM',
        ['2', '2', '2', '2', '1'],
        ['2', '2', '2', '2', '1'],
    ),
    new CodePreset(
        standardCode.selector,
        '4-bit Selector',
        '',
        'Selector ROM',
        ['4'],
        ['4'],
        [],
        16,
    ),
    new CodePreset(
        standardCode.selector,
        '8-bit Selector',
        '',
        'Selector ROM',
        ['8'],
        ['4'],
        [],
        256,
    ),
    new CodePreset(
        standardCode.subSelector,
        'Horizontal Segment AND-grid Driver For 4-LED Plotters',
        '',
        'Selector ROM',
        ['4'],
        ['4'],
        [[0x3, 0xc]],
        16,
    ),
    new CodePreset(
        standardCode.subSelector,
        'Vertical Segment AND-grid Driver For 4-LED Plotters',
        '',
        'Selector ROM',
        ['4'],
        ['4'],
        [[0x5, 0xa]],
        16,
    ),
    new CodePreset(
        standardCode.multiplexer,
        '4-bit Multiplexer',
        '',
        'Selector ROM',
        ['4', '4'],
        ['4'],
        [],
        16,
    ),
];